# Use the latest 2.1 version of CircleCI pipeline process engine.
# This version allows for the use of reusable components like commands, jobs, and executors.
version: 2.1

# Define jobs that will be used in workflows later.
jobs:
  # Job 1: A simple job to print "Hello, World!" to verify CircleCI setup.
  say-hello:
    docker:
      # Use a stable base image to run the job.
      - image: cimg/base:stable
    steps:
      # Step to check out the code from the repository.
      - checkout
      # Step to run a simple command to print "Hello, World!"
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  # Job 2: A job to run SonarQube analysis for code quality checks.
  sonarqube:
    # Specify the working directory for this job.
    working_directory: ~/build
    docker:
      # Use the latest Debian image for a customizable Linux environment.
      - image: debian:latest
    # Specify the CircleCI resource class.
    resource_class: small
    steps:
      # Step to update the package list to ensure up-to-date installations.
      - run: apt-get update
      # Step to install necessary dependencies for SonarQube analysis.
      - run: apt-get install -y unzip wget git curl nodejs npm openjdk-17-jdk
      # Step to set Java 17 as the default Java version.
      - run:
          name: "Set Java 17 as default"
          command: |
            update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-17-openjdk-amd64/bin/java 1
            update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
      # Step to verify that Java 17 is set correctly.
      - run:
          name: "Verify Java version"
          command: "java -version"
      # Step to download and install the SonarScanner CLI.
      - run: |
          wget -O /usr/local/bin/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip && \
          unzip /usr/local/bin/sonar-scanner-cli.zip -d /usr/local && \
          mv /usr/local/sonar-scanner-*/ /usr/local/sonar-scanner && \
          ln -s /usr/local/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
      # Step to check out the code from the repository for analysis.
      - checkout
      # Step to display the current directory structure for debugging purposes.
      - run: find .
      # Step to attach the workspace for shared files and resources.
      - attach_workspace:
          at: ~/workspace
      # Step to run the SonarQube analysis using SonarScanner.
      - run: |
          SONAR_BRANCH="${CIRCLE_BRANCH:-master}"  # Use the branch name from CircleCI or default to 'master'
          echo "Sonar branch value is: $SONAR_BRANCH"
          sonar-scanner \
          -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
          -Dsonar.organization="$SONAR_ORG" \
          -Dsonar.projectName="APDS7311_FinalPOE" \
          -Dsonar.projectVersion="1.0" \
          -Dsonar.sources="backend" \
          -Dsonar.host.url="https://sonarcloud.io" \
          -Dsonar.login="$SONAR_TOKEN" \
          -Dsonar.branch.name="$SONAR_BRANCH" \
          -Dsonar.exclusions="**/android/**,**/ios/**"

# Define workflows to orchestrate the execution of jobs.
workflows:
  # Workflow to execute the defined jobs in sequence or parallel.
  say-hello-workflow:
    jobs:
      - say-hello  # Run the 'say-hello' job.
      - sonarqube  # Run the 'sonarqube' job after 'say-hello'.

# SonarQube project properties for local runs or embedded configuration (use as needed).
# sonar-project.properties file:
#
# sonar.projectKey=${SONAR_PROJECT_KEY}
# sonar.organization=${SONAR_ORG}
# sonar.projectName=APDS7311_FinalPOE
# sonar.projectVersion=1.0
# sonar.sources=backend
# sonar.host.url=https://sonarcloud.io
# sonar.login=${SONAR_TOKEN}

