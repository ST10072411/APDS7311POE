# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

# Define jobs for the workflow.
jobs:
  # Job for running a SonarQube analysis.
  sonarqube:
    working_directory: ~/build  # Define the working directory for the job.
    docker:
      - image: alpine:latest  # Use Alpine Linux for a lightweight environment.
    resource_class: small  # Specify the resource class for the job.
    steps:
      # Update and upgrade the package index in the Alpine image.
      - run:
          name: "Update and upgrade Alpine packages"
          command: |
            apk update && apk upgrade
      # Install required tools and dependencies, including Java.
      - run:
          name: "Install necessary tools and Java"
          command: |
            apk --no-cache add --update openssh git curl nodejs npm unzip openjdk17-jre  # Install Java JRE.
            export JAVA_HOME=/usr/lib/jvm/default-jvm  # Set JAVA_HOME to the installed JRE.
            export PATH="$JAVA_HOME/bin:$PATH"  # Add JAVA_HOME to PATH.
            echo "JAVA_HOME is set to $JAVA_HOME"
            echo "PATH is set to $PATH"
            java -version  # Verify Java installation.
      # Download and extract the SonarQube scanner using unzip.
      - run:
          name: "Download and extract SonarQube scanner"
          command: |
            set -e  # Exit script if any command fails.
            wget -O /usr/local/bin/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
            unzip /usr/local/bin/sonar-scanner-cli.zip -d /usr/local
            mv /usr/local/sonar-scanner-*/ /usr/local/sonar-scanner
            chmod +x /usr/local/sonar-scanner/bin/sonar-scanner  # Ensure the scanner script is executable.
            ln -s /usr/local/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner  # Create a symbolic link for easy command access.
            # Remove embedded JRE to force using the system JRE.
            rm -rf /usr/local/sonar-scanner/jre
      # Modify the sonar-scanner script to explicitly use JAVA_HOME.
      - run:
          name: "Modify sonar-scanner to use JAVA_HOME"
          command: |
            sed -i 's|^exec java|exec $JAVA_HOME/bin/java|' /usr/local/sonar-scanner/bin/sonar-scanner
      # Debug step to verify that the sonar-scanner command is available.
      - run:
          name: "Verify sonar-scanner installation"
          command: which sonar-scanner
      # Check out the repository to access the code for analysis.
      - checkout
      # List all files to verify the directory structure after checkout.
      - run:
          name: "List project files"
          command: find .
      # Attach the workspace to share data between jobs if needed.
      - attach_workspace:
          at: ~/workspace
      # Run the SonarQube analysis.
      - run:
          name: "Run SonarQube analysis"
          command: |
            set -e  # Exit script if any command fails.
            # Set JAVA_HOME and PATH to ensure they are available in this shell.
            export JAVA_HOME=/usr/lib/jvm/default-jvm
            export PATH="$JAVA_HOME/bin:$PATH"
            # Print JAVA_HOME and PATH for debugging.
            echo "JAVA_HOME is set to $JAVA_HOME"
            echo "PATH is set to $PATH"
            java -version  # Confirm Java is available.
            # Determine the branch name, defaulting to 'master' if not set.
            SONAR_BRANCH="${CIRCLE_BRANCH:-master}"
            echo "Sonar branch value is: $SONAR_BRANCH"
            # Execute the SonarQube scanner with the required parameters.
            sonar-scanner \
            -Dsonar.projectKey="$SONAR_PROJECT_KEY" \  # The project key in SonarQube.
            -Dsonar.organization="$SONAR_ORG" \  # The organization key in SonarQube.
            -Dsonar.projectName="APDS7311_FinalPOE" \  # The name of the project.
            -Dsonar.projectVersion="1.0" \  # The version of the project.
            -Dsonar.sources="backend" \  # Directory containing the source code.
            -Dsonar.host.url="https://sonarcloud.io" \  # The URL of the SonarQube server.
            -Dsonar.login="$SONAR_TOKEN" \  # The token for authentication with SonarQube.
            -Dsonar.branch.name="$SONAR_BRANCH" \  # The branch name for analysis.
            -Dsonar.exclusions="**/android/**,**/ios/**"  # Exclude specific directories from analysis.

# Define workflows to control the order of job execution.
workflows:
  main-workflow:
    jobs:
      - sonarqube  # Run the SonarQube job.
